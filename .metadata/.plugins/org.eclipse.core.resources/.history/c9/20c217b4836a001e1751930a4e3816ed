

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Random;

public class DES {
    // Constantes
    private static final int TAILLE_BLOC = 64;
    private static final int TAILLE_SOUS_BLOC = 32;
    private static final int NB_RONDE = 16;


    private static final int[] tab_decalage = {
            1, 1, 2, 2, 2, 2, 2, 2, 1, 2, 2, 2, 2, 2, 2, 1
    };
    private static final int[] PC1 = {
            57, 49, 41, 33, 25, 17, 9,
            1, 58, 50, 42, 34, 26, 18,
            10, 2, 59, 51, 43, 35, 27,
            19, 11, 3, 60, 52, 44, 36,
            63, 55, 47, 39, 31, 23, 15,
            7, 62, 54, 46, 38, 30, 22,
            14, 6, 61, 53, 45, 37, 29,
            21, 13, 5, 28, 20, 12, 4
        };

        private static final int[] PC2 = {
            14, 17, 11, 24, 1, 5,
            3, 28, 15, 6, 21, 10,
            23, 19, 12, 4, 26, 8,
            16, 7, 27, 20, 13, 2,
            41, 52, 31, 37, 47, 55,
            30, 40, 51, 45, 33, 48,
            44, 49, 39, 56, 34, 53,
            46, 42, 50, 36, 29, 32
        };

    private static final int[] perm_initiale = {
            58, 50, 42, 34, 26, 18, 10, 2,
            60, 52, 44, 36, 28, 20, 12, 4,
            62, 54, 46, 38, 30, 22, 14, 6,
            64, 56, 48, 40, 32, 24, 16, 8,
            57, 49, 41, 33, 25, 17, 9, 1,
            59, 51, 43, 35, 27, 19, 11, 3,
            61, 53, 45, 37, 29, 21, 13, 5,
            63, 55, 47, 39, 31, 23, 15, 7
    };
    
    private static final int[][][] S = {
            {
                    // Table S1
                    {14, 4, 13, 1, 2, 15, 11, 8, 3, 10, 6, 12, 5, 9, 0, 7},
                    {0, 15, 7, 4, 14, 2, 13, 1, 10, 6, 12, 11, 9, 5, 3, 8},
                    {4, 1, 14, 8, 13, 6, 2, 11, 15, 12, 9, 7, 3, 10, 5, 0},
                    {15, 12, 8, 2, 4, 9, 1, 7, 5, 11, 3, 14, 10, 0, 6, 13}
            },
            {
                    // Table S2
                    {15, 1, 8, 14, 6, 11, 3, 4, 9, 7, 2, 13, 12, 0, 5, 10},
                    {3, 13, 4, 7, 15, 2, 8, 14, 12, 0, 1, 10, 6, 9, 11, 5},
                    {0, 14, 7, 11, 10, 4, 13, 1, 5, 8, 12, 6, 9, 3, 2, 15},
                    {13, 8, 10, 1, 3, 15, 4, 2, 11, 6, 7, 12, 0, 5, 14, 9}
            },

    };
    private static final int[] E = {
            32, 1, 2, 3, 4, 5,
            4, 5, 6, 7, 8, 9,
            8, 9, 10, 11, 12, 13,
            12, 13, 14, 15, 16, 17,
            16, 17, 18, 19, 20, 21,
            20, 21, 22, 23, 24, 25,
            24, 25, 26, 27, 28, 29,
            28, 29, 30, 31, 32, 1
    };
    // Attributs
    public static Random random = new Random();
    private static int[] masterKey = new int[64];


    private int[][] tab_cles;

    // Constructeur
    public DES() {


        // Initialisation de la masterKey
        masterKey = generateMasterKey();

        // Création des sous-clés à partir de la masterKey
        int [] tab_cles  ;
    }
    public int[] crypte(String message_clair) {
        // Vérifier que le message clair a une longueur valide
        if (message_clair.length() != TAILLE_BLOC / 8) {
            throw new IllegalArgumentException("La longueur du message clair doit être de 8 caractères.");
        }

        // Convertir le message clair en un tableau d'entiers (0 ou 1)
        int[] messageCode = new int[TAILLE_BLOC];
        for (int i = 0; i < message_clair.length(); i++) {
            char c = message_clair.charAt(i);
            for (int j = 0; j < 8; j++) {
                messageCode[i * 8 + j] = (c >> (7 - j)) & 1;
            }
        }

        // Effectuer le chiffrement en utilisant les clés stockées dans tab_cles
        // Vous devez implémenter la logique de chiffrement ici en utilisant tab_cles

        return messageCode;
    }

    public String decrypte(int[] messageCode) {
        // Vérifier que le message codé a une longueur valide
        if (messageCode.length != TAILLE_BLOC) {
            throw new IllegalArgumentException("La longueur du message codé doit être de 64 bits.");
        }

        // Effectuer le déchiffrement en utilisant les clés stockées dans tab_cles
        // Vous devez implémenter la logique de déchiffrement ici en utilisant tab_cles

        // Convertir le tableau d'entiers (0 ou 1) en une chaîne de caractères
        StringBuilder messageClair = new StringBuilder();
        for (int i = 0; i < TAILLE_BLOC; i += 8) {
            int caractere = 0;
            for (int j = 0; j < 8; j++) {
                caractere = (caractere << 1) | messageCode[i + j];
            }
            messageClair.append((char) caractere);
        }

        return messageClair.toString();
    }
    
    public int[] stringToBits(String message) {
        if (message == null || message.isEmpty()) {
            throw new IllegalArgumentException("La chaîne de caractères ne peut pas être vide.");
        }

        int totalBits = message.length() * 8;
        int[] bits = new int[totalBits];
        
        int bitIndex = 0;
        for (int i = 0; i < message.length(); i++) {
            char c = message.charAt(i);
            for (int j = 7; j >= 0; j--) {
                int bit = (c >> j) & 1;
                bits[bitIndex] = bit;
                bitIndex++;
            }
        }

        return bits;
    }

    
    public String bitsToString(int[] bits) {
        // Vérifiez si le tableau bits est vide ou nul
        if (bits == null || bits.length == 0) {
            throw new IllegalArgumentException("Le tableau bits ne peut pas être vide ou nul.");
        }

        // Calculez la taille du tableau d'entiers en bits
        int totalBits = bits.length;

        // Vérifiez que le tableau contient un nombre d'entiers multiple de 8
        if (totalBits % 8 != 0) {
            throw new IllegalArgumentException("Le tableau bits doit avoir une longueur multiple de 8 pour représenter des caractères.");
        }

        // Calculez la taille du tableau de caractères
        int totalChars = totalBits / 8;

        // Créez un tableau de caractères pour stocker les caractères convertis
        char[] chars = new char[totalChars];

        // Parcourez le tableau d'entiers en groupes de 8 pour les convertir en caractères
        for (int i = 0; i < totalChars; i++) {
            int charValue = 0;
            for (int j = 0; j < 8; j++) {
                charValue = (charValue << 1) | bits[i * 8 + j];
            }
            chars[i] = (char) charValue;
        }

        // Créez une chaîne de caractères à partir du tableau de caractères
        return new String(chars);
    }


    


    // Méthode pour générer une clé aléatoire
    private int[] generateMasterKey() {
        int[] key = new int[64];
        for (int i = 0; i < 64; i++) {
            int valeurAlea = random.nextInt(2);
            key[i] = valeurAlea;
        }
        return key;
    }
   
    public int[] permutation(int[] tab_permutation, int[] bloc) {
        // Assurez-vous que la taille du bloc correspond à la taille de la permutation
        if (bloc.length != tab_permutation.length) {
            throw new IllegalArgumentException("La taille du bloc doit correspondre à la taille de la permutation.");
        }

        int[] blocPermute = new int[bloc.length];

        // Appliquez la permutation en réorganisant les bits du bloc
        for (int i = 0; i < tab_permutation.length; i++) {
            blocPermute[i] = bloc[tab_permutation[i] - 1]; // -1 car les indices commencent à 1 dans tab_permutation
        }

        return blocPermute;
    }
    public int[] invPermutation(int[] tab_permutation, int[] bloc) {
        // Assurez-vous que la taille du bloc correspond à la taille de la permutation
        if (bloc.length != tab_permutation.length) {
            throw new IllegalArgumentException("La taille du bloc doit correspondre à la taille de la permutation.");
        }

        int[] blocInversePermute = new int[bloc.length];

        // Appliquez la permutation inverse en réorganisant les bits du bloc
        for (int i = 0; i < tab_permutation.length; i++) {
            blocInversePermute[tab_permutation[i] - 1] = bloc[i]; // -1 car les indices commencent à 1 dans tab_permutation
        }

        return blocInversePermute;
    }
    public int[][] decoupage(int[] bloc, int tailleBlocs) {
        // Vérifiez que la taille du bloc est un multiple de tailleBlocs
        if (bloc.length % tailleBlocs != 0) {
            throw new IllegalArgumentException("La taille du bloc doit être un multiple de tailleBlocs.");
        }

        int nombreDeBlocs = bloc.length / tailleBlocs;
        int[][] blocsDecoupes = new int[nombreDeBlocs][tailleBlocs];

        // Découpez le bloc en sous-blocs de la taille spécifiée
        for (int i = 0; i < nombreDeBlocs; i++) {
            for (int j = 0; j < tailleBlocs; j++) {
                blocsDecoupes[i][j] = bloc[i * tailleBlocs + j];
            }
        }

        return blocsDecoupes;
    }

    
    public int[] génèreClé(int n) {
        if (n < 1 || n > NB_RONDE) {
            throw new IllegalArgumentException("La ronde doit être entre 1 et 16.");
        }

        int[] cléDeRonde = new int[48];

        // Permutation initiale PC1
        int[] keyPermuted = new int[56];
        for (int i = 0; i < 56; i++) {
            keyPermuted[i] = masterKey[PC1[i] - 1];
        }

        // Diviser la clé en deux parties gauche et droite
        int[] leftKey = new int[28];
        int[] rightKey = new int[28];
        System.arraycopy(keyPermuted, 0, leftKey, 0, 28);
        System.arraycopy(keyPermuted, 28, rightKey, 0, 28);

        // Effectuer les décalages circulaires en fonction de la ronde
        for (int round = 0; round < n; round++) {
            leftKey = decalle_gauche(leftKey, tab_decalage[round]);
            rightKey = decalle_gauche(rightKey, tab_decalage[round]);
        }

        // Combiner les parties gauche et droite
        int[] combinedKey = new int[56];
        System.arraycopy(leftKey, 0, combinedKey, 0, 28);
        System.arraycopy(rightKey, 0, combinedKey, 28, 28);

        // Permutation de choix PC2 pour obtenir la clé de ronde
        for (int i = 0; i < 48; i++) {
            cléDeRonde[i] = combinedKey[PC2[i] - 1];
        }

        // Stocker la clé de ronde dans tab_cles
        tab_cles[n - 1] = cléDeRonde;

        return cléDeRonde;
    }

    // Méthode pour effectuer un décalage circulaire vers la gauche
    private int[]  decalle_gauche(int[] bloc, int nbCran) {
        int[] shiftedArray = new int[bloc.length];
        for (int i = 0; i < bloc.length; i++) {
            int newIndex = (i + nbCran) % bloc.length;
            shiftedArray[i] = bloc[newIndex];
        }
        return shiftedArray;
    }
    
    public int[] xor(int[] tab1, int[] tab2) {
        // Assurez-vous que les deux tableaux ont la même longueur
        if (tab1.length != tab2.length) {
            throw new IllegalArgumentException("Les deux tableaux doivent avoir la même longueur.");
        }

        int[] resultatXor = new int[tab1.length];

        // Réalisez l'opération XOR entre les éléments correspondants des deux tableaux
        for (int i = 0; i < tab1.length; i++) {
            resultatXor[i] = tab1[i] ^ tab2[i];
        }

        return resultatXor;
    }
    public int[] fonction_S(int[] tab) {
        // Assurez-vous que la longueur du tableau d'entrée est correcte pour le chiffrement DES
        if (tab.length != 48) {
            throw new IllegalArgumentException("La longueur du tableau d'entrée doit être de 48 bits.");
        }

        int[] resultatS = new int[32];
        int[][] sousBlocs = decoupage(tab, 6); // Utilisation de la fonction decoupage

        // Traitez chaque sous-bloc
        for (int groupeIndex = 0; groupeIndex < sousBlocs.length; groupeIndex++) {
            int[] groupe = sousBlocs[groupeIndex];

            // Déterminez la ligne et la colonne pour chaque sous-bloc
            int ligne = (groupe[0] << 1) | groupe[5];
            int colonne = (groupe[1] << 3) | (groupe[2] << 2) | (groupe[3] << 1) | groupe[4];

            // Obtenez la valeur de substitution à partir de la table S appropriée
            int valeurS = S[groupeIndex][ligne][colonne];

            // Convertissez la valeur de substitution en binaire (4 bits) et ajoutez-la au résultat
            for (int j = 3; j >= 0; j--) {
                resultatS[groupeIndex * 4 + j] = (valeurS >> j) & 1;
            }
        }

        return resultatS;
    }

    public int[] fonction_F(int[] uneCle , int[] unD) {
        // Assurez-vous que la longueur du demi-bloc est correcte pour le chiffrement DES
        if (unD.length != 32) {
            throw new IllegalArgumentException("La longueur du demi-bloc doit être de 32 bits.");
        }
        int[] permutation_P = {
        	    16, 7, 20, 21, 29, 12, 28, 17,
        	    1, 15, 23, 26, 5, 18, 31, 10,
        	    2, 8, 24, 14, 32, 27, 3, 9,
        	    19, 13, 30, 6, 22, 11, 4, 25
        	};


        int[] resultatF = new int[32];

        // Expansion E
        int[] expansionE = permutation(E, unD);

        // Opération XOR avec la clé Kn (uneCle)
        int[] xorResult = xor(uneCle, expansionE);

        // Fonction de substitution S
        int[] fonctionSResult = fonction_S(xorResult);

     // Recoller les 8 blocs de 4 bits (32 bits au total)
        int[] blocRecolle = new int[32];
        for (int i = 0; i < 8; i++) {
            System.arraycopy(fonctionSResult, i * 4, blocRecolle, i * 4, 4);
        }

        int[] resultatFinal = permutation(permutation_P, blocRecolle); // Remplacez tab_permutation_P par votre tableau de permutation P


        return resultatF;
    }





}
