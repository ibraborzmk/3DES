import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

public class DESTest {
    private DES des;

    @BeforeEach
    public void setUp() {
        des = new DES();
    }


    @Test
    public void testStringToBits() {
        String messageClair = "Hello";
        int[] bits = des.stringToBits(messageClair);
        
        int[] expectedBits = {
    		0, 1, 0, 0, 1, 0, 0, 0,
            0, 1, 1, 0, 0, 1, 0, 1,
            0, 1, 1, 0, 1, 1, 0, 0,
            0, 1, 1, 0, 1, 1, 0, 0,
            0, 1, 1, 0, 1, 1, 1, 1,
        };
       
        assertArrayEquals(expectedBits, bits);
    }

    @Test
    public void testBitsToString() {
        int[] bits = {
            0, 1, 0, 0, 1, 0, 0, 0,
            0, 1, 1, 0, 0, 1, 0, 1,
            0, 1, 1, 0, 1, 1, 0, 0,
            0, 1, 1, 0, 1, 1, 0, 0,
            0, 1, 1, 0, 1, 1, 1, 1,
        };
        String expectedMessage = "Hello";

        String message = des.bitsToString(bits);

        assertEquals(expectedMessage, message);
    }
    @Test
    public void testCrypte() {
        String message_clair = "le mot de passe est AZERTy123456789";
        int[] messageCode = des.crypte(message_clair);

        // Effectuer des vérifications appropriées pour le tableau d'entiers résultant du cryptage.
        // ...

        // Exemple de vérification de tableau d'entiers
        int[] expectedBits = {
        		1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 
        };
        
        assertArrayEquals(expectedBits, messageCode);
    }

    @Test
    public void testDecrypte() {
        int[] messageCode = {
        		1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 
        };
        String messageDecrypte = des.decrypte(messageCode);
        System.out.print(messageDecrypte);
        // Vérifier si le message décrypté est identique au message d'origine
        assertEquals("le mot de passe est AZERTy123456789", messageDecrypte);
      
    }
 

    @Test
    public void testPermutation() {
        int[] bloc = {
            1, 2, 3, 4, 5, 6, 7, 8
        };
        int[] tab_permutation = {
            2, 4, 1, 3, 8, 6, 5, 7
        };
        int[] resultatPermutation = des.permutation(tab_permutation, bloc);
        int[] expectedPermutation = {
            2, 4, 1, 3, 8, 6, 5, 7
        };

        assertArrayEquals(expectedPermutation, resultatPermutation);
    }
    @Test
    public void testInvPermutation() {
        int[] tab_permutation = {2, 4, 1, 3};
        int[] bloc = {5, 10, 15, 20};

        // Appel de la fonction à tester
        int[] blocInversePermute = des.invPermutation(tab_permutation, bloc);

        // Vérification
        int[] expectedResult = {15, 5, 20, 10}; // Selon la permutation {2, 4, 1, 3}
        assertArrayEquals(expectedResult, blocInversePermute);
    }
    @Test
    public void testDecoupage() {
        int[] bloc = {
            1, 2, 3, 4, 5, 6, 7, 8
        };
        int tailleBlocs = 4;
        int[][] blocsDecoupes = des.decoupage(bloc, tailleBlocs);
        int[][] expectedBlocs = {
            {1, 2, 3, 4},
            {5, 6, 7, 8}
        };

        assertArrayEquals(expectedBlocs, blocsDecoupes);
    }
    
    @Test
    public void testDecoupageRecollage() {
        int[] blocOriginal = {1, 2, 3, 4, 5, 6};
        int tailleBlocs = 2;

        // Test de la fonction decoupage
        int[][] blocsDecoupes = des.decoupage(blocOriginal, tailleBlocs);
        int[] blocRecolle = des.recollage_bloc(blocsDecoupes);

        // Vérification
        assertArrayEquals(blocOriginal, blocRecolle);
    }
    @Test
    public void testDecalleGauche() {
        int[] bloc = {1, 2, 3, 4, 5};
        int nbCran = 2;

        // Appel de la fonction à tester
        int[] resultatAttendu = {3, 4, 5, 1, 2};
        int[] resultatObtenu = des.decalle_gauche(bloc, nbCran);

        // Vérification
        assertArrayEquals(resultatAttendu, resultatObtenu);
    }
    // Ajoutez d'autres tests pour les autres fonctionnalités de votre classe DES

}

